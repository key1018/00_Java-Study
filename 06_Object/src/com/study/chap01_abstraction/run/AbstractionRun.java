package com.study.chap01_abstraction.run;

import com.study.chap01_abstraction.model.vo.Student;

public class AbstractionRun {

	public static void main(String[] args) {

		/*
		 * 1. 객체지향언어 : "객체"를 "지향"하는 언어로 "객체 중심"으로 돌아가는 언어
		 * 
		 * 2. 객체란? 
		 * 		사전적 정의 : 현실세계에서 독립적으로 존재(목적, 의미, 가치가 있는)하는 모든 것들을 의미
		 * 				(유형, 무형, 개념, ... )
		 * 	  자바에서의 정의 : 메모리 상에 Heap영역에 만들어지는(생성되는) 모든 것들
		 * 
		 *  	현실세계에서는 객체들간의 상호작용으로 돌아감
		 *  
		 * 3. 객체지향 프로그램 : 현실세계에서 객체들의 상호작용을 프로그래밍 과정을 통해 가상세계로 구현하는 과정
		 * 				ex) 현실세계 : 백화점 쇼핑 ----> 가상세계 : 인터넷쇼핑
		 * 
		 * 4. 구현하고자하는 프로그램 상의 필요한 객체들을 만들기 위해서는 '추상화 + 캡슐화'를 통해 클래스를 생성해야한다!!
		 * 		==> 클래스란? 각 객체들의 속성(정보)들을 담아낼 그릇같은 존재
		 * 
		 * 5. 추상화 과정
		 * 
		 * 	1) 구현하고자하는 프로그램에서 필요한 객체들을 생각하기
		 * 	2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 모두 추출하기
		 *  3) 추출한 것들을 가지고 구현하고자 했던 프로그램의 "실직적인 목적"에 맞춰 불필요한 속싱, 기능들을 제거할 것
		 *  4) 최종적으로 추려진 속성들을 어떤 자료형, 변수명을 사용할건지 생각
		 *  
		 *  ex) 학생 관리 프로그램
		 * 	 	1) 학생 개개인이 객체 (홍길동, 이말순, 정하나 등등)
		 * 		2) 학생들의 속성 및 기능들을 추출하기 (이름, 성별, 나이, 키, 학년, 반, 번호, 몸무게, 달리기점수, 국어점수, 수학점수, 영어점수, 발사이즈, .. )
		 * 		3) 만약! 학생들의 "인적사항"에 대한 프로그램을 구현하고자 했다면 : 이름, 성별, 나이, 학년, 반, 번호 추출
		 * 		   만약! 학생들의 "건강정보"에 대한 프로그램을 구현하고자 했다면 : 이름, 성별, 나이, 학년, 반, 번호, 키, 몸무게, 달리기점수, 발사이즈 추출
		 * 		   만약! 학생들의 "성적"에 대한 프로그램을 구현하고자 했다면 : 이름, 성별, 나이, 학년, 반, 번호, 국어점수, 수학점수, 영어점수 추출
		 * 
		 * 			결국 추려진 것은 이름, 성별, 나이, 학년, 반, 번호
		 * 
		 * 		4) 이름 = String name;
		 * 		   성별 = char gender;
		 * 		   나이 = int age;
		 * 	  	   학년 = int grade;
		 * 		    반 = int classroom;
		 * 		   번호 = int number;
		 * 
		 * 6. 위에 최종 추려진 것들을 가지고 프래그래밍 시작
		 * 
		 *  1) "변수"를 가지고 프래그래밍을 했을 경우 : 
		 *   - 학생 개개인의 변수를 각각 만들어야하기 때문에 수백~수천개의 변수가 만들어짐
		 *     => 관리하기 힘들다!! (반복문 활용x)
		 *     
		 *  2) "배열"을 가지고 프로그래밍을 했을 경우 : 
		 *   - 기존의 학생 정보를 지울 때 변수 한개를 못지웠을 경우 => 학생의 정보가 뒤바뀔 수 있다
		 *   	ex) String[] name = {홍길동, 이말숙, 정하나}
		 *   		int[] age = { 20, 23, 22}
		 *   	==> 나이 정보를 못지움
		 *   		String[] name = {홍길동, 정하나}
		 *   		int[] age = { 20, 23, 22}
		 *     	==> 정하나의 나이가 23살이 된다
		 *   
		 *   - 새로운 학생 정보를 추가하고자 할 때 => 배열의 크기 변경 불가 => 새로운 배열만들어서 기존꺼 옮겨담기후 추가
		 *   
		 *   
		 *  3) 구조체의 개념
		 *  
		 *   * 구조체 - 여러개의 자료형에 여러개의 값들을 보관할 수 있다
		 *   
		 *   String값, int값, double값 등등 같이 보관할 수 있다 => 이것이 클래스!!
		 */
						
			// 객체를 생성하기 위해서는 new 라는 키워드를 통해 Heap영역에 생성해야됨(공간할당)
				
				
			Student gildong = new Student();
			// 홍길동학생의 객체 생성

			// A_AbstractionStudent의 접근제한자가 public이어서 쉽게 접근할 수 있다
			gildong.name = "홍길동";
			gildong.age = 20;
			gildong.gender = '남';
			gildong.grade = 3;
			gildong.classroom = 2;
			gildong.number = 12;

			System.out.println(gildong.grade + "학년 " + gildong.classroom + "반 " + gildong.number + "번 " + gildong.name
					+ "님의 나이는 " + gildong.age + "살이고, " + gildong.gender + "자 입니다.");

			Student sook = new Student();

			sook.name = "이말숙";
			sook.age = 23;
			sook.gender = '여';

			System.out.println(sook.name + "님은 " + sook.age + "살" + sook.gender + "자 입니다.");
		}

			/*
			 * 필드를 public 접근제한자로 작성 
			 * => 객체 생성 후 해당 필드에 .을 이용해서 "직접접근"해서 값 대입하거나 값을 가져오는 과정했음
			 * => 외부에서 함부로 값을 변질시키거나 조회권한이 없는 사람이 값을 쉽게 가져갈 수 있는 문제 발생 
			 *    >> 캡슐화 작업 진행! 
			 * 
			 */


	}


